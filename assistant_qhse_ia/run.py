#!/usr/bin/env python3
"""
Script de d√©marrage pour l'Assistant QHSE IA
Initialise la base de donn√©es et lance le serveur Flask
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """V√©rifie que Python 3.8+ est utilis√©"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        print(f"Version actuelle: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")

def install_requirements():
    """Installe les d√©pendances Python"""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        sys.exit(1)

def initialize_database():
    """Initialise la base de donn√©es"""
    print("üóÑÔ∏è  Initialisation de la base de donn√©es...")
    try:
        from database.init_db import init_database
        init_database()
        print("‚úÖ Base de donn√©es initialis√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}")
        sys.exit(1)

def train_models():
    """Entra√Æne les mod√®les d'IA"""
    print("ü§ñ Entra√Ænement des mod√®les d'IA...")
    try:
        from scripts.train_model import train_risk_classifier, create_recommendation_engine
        train_risk_classifier()
        create_recommendation_engine()
        print("‚úÖ Mod√®les d'IA entra√Æn√©s")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de l'entra√Ænement des mod√®les: {e}")
        print("L'application fonctionnera avec des pr√©dictions par d√©faut")

def start_server():
    """D√©marre le serveur Flask"""
    print("üöÄ D√©marrage du serveur Flask...")
    print("=" * 50)
    print("üåê Application disponible sur: http://localhost:5000")
    print("üë§ Compte de d√©monstration: admin / admin")
    print("=" * 50)
    
    try:
        from app import app
        app.run(debug=True, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüëã Arr√™t du serveur")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du serveur: {e}")
        sys.exit(1)

def main():
    """Fonction principale"""
    print("üèóÔ∏è  Assistant QHSE IA - D√©marrage")
    print("=" * 50)
    
    # V√©rifications pr√©liminaires
    check_python_version()
    
    # Installation des d√©pendances
    if not os.path.exists("venv") and "--no-install" not in sys.argv:
        install_requirements()
    
    # Initialisation de la base de donn√©es
    if not os.path.exists("assistant_qhse_ia/database/qhse.db") or "--force-init" in sys.argv:
        initialize_database()
    else:
        print("‚úÖ Base de donn√©es existante trouv√©e")
    
    # Entra√Ænement des mod√®les
    if not os.path.exists("assistant_qhse_ia/modeles/risk_classifier.joblib") or "--force-train" in sys.argv:
        train_models()
    else:
        print("‚úÖ Mod√®les d'IA existants trouv√©s")
    
    # D√©marrage du serveur
    start_server()

if __name__ == "__main__":
    main()
